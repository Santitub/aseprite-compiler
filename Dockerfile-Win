FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive

# 1. Instalamos herramientas necesarias
RUN apt-get update && apt-get install -y \
    git \
    cmake \
    ninja-build \
    python3 \
    python3-pip \
    g++-mingw-w64 \
    mingw-w64 \
    unzip \
    wget \
    pkg-config \
    curl \
    zip \
    file \
    && rm -rf /var/lib/apt/lists/*

# 2. Clonamos Aseprite
WORKDIR /build
RUN git clone --recursive https://github.com/aseprite/aseprite.git

# 3. Descargamos Skia para Windows
RUN wget -O skia-windows.zip https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-Windows-Release-x64.zip && \
    mkdir -p skia && \
    unzip skia-windows.zip -d skia && \
    rm skia-windows.zip

# 4. Creamos carpeta de build
RUN mkdir -p aseprite/build
WORKDIR /build/aseprite/build

# 5. Configuramos CMake para MinGW (cross-compiling)
RUN cmake \
  -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchains/mingw32.cmake \
  -DCMAKE_BUILD_TYPE=Release \
  -DLAF_BACKEND=skia \
  -DSKIA_DIR=/build/skia \
  -DSKIA_LIBRARY_DIR=/build/skia/out/Release-x64 \
  -DSKIA_LIBRARY=/build/skia/out/Release-x64/libskia.a \
  -G Ninja \
  ..

# 6. Compilamos
RUN ninja aseprite

# 7. Creamos carpeta de salida
RUN mkdir -p /output/aseprite-portable

# 8. Copiamos el ejecutable
RUN cp bin/aseprite.exe /output/aseprite-portable/

# 9. Copiamos algunas DLLs comunes de MinGW
RUN cp /usr/x86_64-w64-mingw32/lib/libgcc_s_seh-1.dll /output/aseprite-portable/ && \
    cp /usr/x86_64-w64-mingw32/lib/libstdc++-6.dll /output/aseprite-portable/ && \
    cp /usr/x86_64-w64-mingw32/lib/libwinpthread-1.dll /output/aseprite-portable/

# 10. (Opcional) Copiamos los recursos del directorio "data" si quieres una versión con assets
RUN cp -r ../data /output/aseprite-portable/

# 11. Empaquetamos todo en un zip
WORKDIR /output
RUN zip -r aseprite-windows-portable.zip aseprite-portable

# 12. El .zip estará aquí listo para copiar desde el contenedor